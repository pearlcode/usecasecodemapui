// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserCaseList  mounts properly with correct data 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <userCaseList
    match={
      Object {
        "url": "/usercases",
      }
    }
    userCases={
      Array [
        Object {
          "description": "the first description",
          "id": 1,
          "title": "usercase 1",
        },
        Object {
          "description": "the second description",
          "id": 2,
          "title": "usercase 2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          type="button"
        >
          new usercase
        </button>,
        Array [
          <li
            className="user-case"
          >
            <div
              className="user-case__title"
            >
              <Link
                replace={false}
                to="/usercases/1"
              >
                usercase 1
              </Link>
            </div>
            <div
              className="user-case__description"
            >
              the first description
            </div>
          </li>,
          <li
            className="user-case"
          >
            <div
              className="user-case__title"
            >
              <Link
                replace={false}
                to="/usercases/2"
              >
                usercase 2
              </Link>
            </div>
            <div
              className="user-case__description"
            >
              the second description
            </div>
          </li>,
        ],
      ],
      "className": "user-cases",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "new usercase",
          "type": "button",
        },
        "ref": null,
        "rendered": "new usercase",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="user-case__title"
            >
              <Link
                replace={false}
                to="/usercases/1"
              >
                usercase 1
              </Link>
            </div>,
            <div
              className="user-case__description"
            >
              the first description
            </div>,
          ],
          "className": "user-case",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/usercases/1"
              >
                usercase 1
              </Link>,
              "className": "user-case__title",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "usercase 1",
                "replace": false,
                "to": "/usercases/1",
              },
              "ref": null,
              "rendered": "usercase 1",
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "the first description",
              "className": "user-case__description",
            },
            "ref": null,
            "rendered": "the first description",
            "type": "div",
          },
        ],
        "type": "li",
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="user-case__title"
            >
              <Link
                replace={false}
                to="/usercases/2"
              >
                usercase 2
              </Link>
            </div>,
            <div
              className="user-case__description"
            >
              the second description
            </div>,
          ],
          "className": "user-case",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/usercases/2"
              >
                usercase 2
              </Link>,
              "className": "user-case__title",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "usercase 2",
                "replace": false,
                "to": "/usercases/2",
              },
              "ref": null,
              "rendered": "usercase 2",
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "the second description",
              "className": "user-case__description",
            },
            "ref": null,
            "rendered": "the second description",
            "type": "div",
          },
        ],
        "type": "li",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            type="button"
          >
            new usercase
          </button>,
          Array [
            <li
              className="user-case"
            >
              <div
                className="user-case__title"
              >
                <Link
                  replace={false}
                  to="/usercases/1"
                >
                  usercase 1
                </Link>
              </div>
              <div
                className="user-case__description"
              >
                the first description
              </div>
            </li>,
            <li
              className="user-case"
            >
              <div
                className="user-case__title"
              >
                <Link
                  replace={false}
                  to="/usercases/2"
                >
                  usercase 2
                </Link>
              </div>
              <div
                className="user-case__description"
              >
                the second description
              </div>
            </li>,
          ],
        ],
        "className": "user-cases",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "new usercase",
            "type": "button",
          },
          "ref": null,
          "rendered": "new usercase",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="user-case__title"
              >
                <Link
                  replace={false}
                  to="/usercases/1"
                >
                  usercase 1
                </Link>
              </div>,
              <div
                className="user-case__description"
              >
                the first description
              </div>,
            ],
            "className": "user-case",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/usercases/1"
                >
                  usercase 1
                </Link>,
                "className": "user-case__title",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "usercase 1",
                  "replace": false,
                  "to": "/usercases/1",
                },
                "ref": null,
                "rendered": "usercase 1",
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "the first description",
                "className": "user-case__description",
              },
              "ref": null,
              "rendered": "the first description",
              "type": "div",
            },
          ],
          "type": "li",
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="user-case__title"
              >
                <Link
                  replace={false}
                  to="/usercases/2"
                >
                  usercase 2
                </Link>
              </div>,
              <div
                className="user-case__description"
              >
                the second description
              </div>,
            ],
            "className": "user-case",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/usercases/2"
                >
                  usercase 2
                </Link>,
                "className": "user-case__title",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "usercase 2",
                  "replace": false,
                  "to": "/usercases/2",
                },
                "ref": null,
                "rendered": "usercase 2",
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "the second description",
                "className": "user-case__description",
              },
              "ref": null,
              "rendered": "the second description",
              "type": "div",
            },
          ],
          "type": "li",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
